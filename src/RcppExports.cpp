// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// Toy_Model
Rcpp::List Toy_Model(double year, double C_roots, double N_roots, double C_fungal, double N_fungal, double Litter_mantle, double Litter_ERM, Rcpp::DataFrame Hyde_weather, std::vector<double> parameters_R);
RcppExport SEXP _MycoModel_Toy_Model(SEXP yearSEXP, SEXP C_rootsSEXP, SEXP N_rootsSEXP, SEXP C_fungalSEXP, SEXP N_fungalSEXP, SEXP Litter_mantleSEXP, SEXP Litter_ERMSEXP, SEXP Hyde_weatherSEXP, SEXP parameters_RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type year(yearSEXP);
    Rcpp::traits::input_parameter< double >::type C_roots(C_rootsSEXP);
    Rcpp::traits::input_parameter< double >::type N_roots(N_rootsSEXP);
    Rcpp::traits::input_parameter< double >::type C_fungal(C_fungalSEXP);
    Rcpp::traits::input_parameter< double >::type N_fungal(N_fungalSEXP);
    Rcpp::traits::input_parameter< double >::type Litter_mantle(Litter_mantleSEXP);
    Rcpp::traits::input_parameter< double >::type Litter_ERM(Litter_ERMSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type Hyde_weather(Hyde_weatherSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type parameters_R(parameters_RSEXP);
    rcpp_result_gen = Rcpp::wrap(Toy_Model(year, C_roots, N_roots, C_fungal, N_fungal, Litter_mantle, Litter_ERM, Hyde_weather, parameters_R));
    return rcpp_result_gen;
END_RCPP
}
// plant_decision
Rcpp::List plant_decision(double C_roots, double N_roots, double C_fungal, double optimal_root_funga_biomass_ratio, double N_allo, double max_C_allocation_CASSIA);
RcppExport SEXP _MycoModel_plant_decision(SEXP C_rootsSEXP, SEXP N_rootsSEXP, SEXP C_fungalSEXP, SEXP optimal_root_funga_biomass_ratioSEXP, SEXP N_alloSEXP, SEXP max_C_allocation_CASSIASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type C_roots(C_rootsSEXP);
    Rcpp::traits::input_parameter< double >::type N_roots(N_rootsSEXP);
    Rcpp::traits::input_parameter< double >::type C_fungal(C_fungalSEXP);
    Rcpp::traits::input_parameter< double >::type optimal_root_funga_biomass_ratio(optimal_root_funga_biomass_ratioSEXP);
    Rcpp::traits::input_parameter< double >::type N_allo(N_alloSEXP);
    Rcpp::traits::input_parameter< double >::type max_C_allocation_CASSIA(max_C_allocation_CASSIASEXP);
    rcpp_result_gen = Rcpp::wrap(plant_decision(C_roots, N_roots, C_fungal, optimal_root_funga_biomass_ratio, N_allo, max_C_allocation_CASSIA));
    return rcpp_result_gen;
END_RCPP
}
// myco_decision
Rcpp::List myco_decision(double C_fungal, double N_fungal, double C_roots, double N_roots, double NC_fungal_opt, double growth_C, double growth_N);
RcppExport SEXP _MycoModel_myco_decision(SEXP C_fungalSEXP, SEXP N_fungalSEXP, SEXP C_rootsSEXP, SEXP N_rootsSEXP, SEXP NC_fungal_optSEXP, SEXP growth_CSEXP, SEXP growth_NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type C_fungal(C_fungalSEXP);
    Rcpp::traits::input_parameter< double >::type N_fungal(N_fungalSEXP);
    Rcpp::traits::input_parameter< double >::type C_roots(C_rootsSEXP);
    Rcpp::traits::input_parameter< double >::type N_roots(N_rootsSEXP);
    Rcpp::traits::input_parameter< double >::type NC_fungal_opt(NC_fungal_optSEXP);
    Rcpp::traits::input_parameter< double >::type growth_C(growth_CSEXP);
    Rcpp::traits::input_parameter< double >::type growth_N(growth_NSEXP);
    rcpp_result_gen = Rcpp::wrap(myco_decision(C_fungal, N_fungal, C_roots, N_roots, NC_fungal_opt, growth_C, growth_N));
    return rcpp_result_gen;
END_RCPP
}
// myco_growth
Rcpp::List myco_growth(double C_fungal, double N_fungal, double a, double b);
RcppExport SEXP _MycoModel_myco_growth(SEXP C_fungalSEXP, SEXP N_fungalSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type C_fungal(C_fungalSEXP);
    Rcpp::traits::input_parameter< double >::type N_fungal(N_fungalSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(myco_growth(C_fungal, N_fungal, a, b));
    return rcpp_result_gen;
END_RCPP
}
// mycofon_balence
Rcpp::List mycofon_balence(double C_roots, double N_roots, double optimal_root_fungal_biomass_ratio, double C_fungal, double N_fungal, double turnover_roots, double turnover_roots_mycorrhized, double turnover_mantle, double turnover_ERM, std::vector<double> respiration_parameters_R, double NH4, double NO3, double FOM_Norg, double NC_in_fungal_opt, double T, double Tsb, double SWC, std::vector<double> N_limits_Plant, std::vector<double> N_k_Plant, std::vector<double> SWC_k_Plant, std::vector<double> N_limits_Fungal, std::vector<double> N_k_Fungal, std::vector<double> SWC_k_Fungal, double mantle_mass, double ERM_mass, std::vector<double> parameters_NH4_on_NO3, double growth_C, double growth_N, double max_C_allocation_CASSIA, double allocation_N_to_rest_of_plant, bool mycofon_stratergy);
RcppExport SEXP _MycoModel_mycofon_balence(SEXP C_rootsSEXP, SEXP N_rootsSEXP, SEXP optimal_root_fungal_biomass_ratioSEXP, SEXP C_fungalSEXP, SEXP N_fungalSEXP, SEXP turnover_rootsSEXP, SEXP turnover_roots_mycorrhizedSEXP, SEXP turnover_mantleSEXP, SEXP turnover_ERMSEXP, SEXP respiration_parameters_RSEXP, SEXP NH4SEXP, SEXP NO3SEXP, SEXP FOM_NorgSEXP, SEXP NC_in_fungal_optSEXP, SEXP TSEXP, SEXP TsbSEXP, SEXP SWCSEXP, SEXP N_limits_PlantSEXP, SEXP N_k_PlantSEXP, SEXP SWC_k_PlantSEXP, SEXP N_limits_FungalSEXP, SEXP N_k_FungalSEXP, SEXP SWC_k_FungalSEXP, SEXP mantle_massSEXP, SEXP ERM_massSEXP, SEXP parameters_NH4_on_NO3SEXP, SEXP growth_CSEXP, SEXP growth_NSEXP, SEXP max_C_allocation_CASSIASEXP, SEXP allocation_N_to_rest_of_plantSEXP, SEXP mycofon_stratergySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type C_roots(C_rootsSEXP);
    Rcpp::traits::input_parameter< double >::type N_roots(N_rootsSEXP);
    Rcpp::traits::input_parameter< double >::type optimal_root_fungal_biomass_ratio(optimal_root_fungal_biomass_ratioSEXP);
    Rcpp::traits::input_parameter< double >::type C_fungal(C_fungalSEXP);
    Rcpp::traits::input_parameter< double >::type N_fungal(N_fungalSEXP);
    Rcpp::traits::input_parameter< double >::type turnover_roots(turnover_rootsSEXP);
    Rcpp::traits::input_parameter< double >::type turnover_roots_mycorrhized(turnover_roots_mycorrhizedSEXP);
    Rcpp::traits::input_parameter< double >::type turnover_mantle(turnover_mantleSEXP);
    Rcpp::traits::input_parameter< double >::type turnover_ERM(turnover_ERMSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type respiration_parameters_R(respiration_parameters_RSEXP);
    Rcpp::traits::input_parameter< double >::type NH4(NH4SEXP);
    Rcpp::traits::input_parameter< double >::type NO3(NO3SEXP);
    Rcpp::traits::input_parameter< double >::type FOM_Norg(FOM_NorgSEXP);
    Rcpp::traits::input_parameter< double >::type NC_in_fungal_opt(NC_in_fungal_optSEXP);
    Rcpp::traits::input_parameter< double >::type T(TSEXP);
    Rcpp::traits::input_parameter< double >::type Tsb(TsbSEXP);
    Rcpp::traits::input_parameter< double >::type SWC(SWCSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type N_limits_Plant(N_limits_PlantSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type N_k_Plant(N_k_PlantSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type SWC_k_Plant(SWC_k_PlantSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type N_limits_Fungal(N_limits_FungalSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type N_k_Fungal(N_k_FungalSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type SWC_k_Fungal(SWC_k_FungalSEXP);
    Rcpp::traits::input_parameter< double >::type mantle_mass(mantle_massSEXP);
    Rcpp::traits::input_parameter< double >::type ERM_mass(ERM_massSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type parameters_NH4_on_NO3(parameters_NH4_on_NO3SEXP);
    Rcpp::traits::input_parameter< double >::type growth_C(growth_CSEXP);
    Rcpp::traits::input_parameter< double >::type growth_N(growth_NSEXP);
    Rcpp::traits::input_parameter< double >::type max_C_allocation_CASSIA(max_C_allocation_CASSIASEXP);
    Rcpp::traits::input_parameter< double >::type allocation_N_to_rest_of_plant(allocation_N_to_rest_of_plantSEXP);
    Rcpp::traits::input_parameter< bool >::type mycofon_stratergy(mycofon_stratergySEXP);
    rcpp_result_gen = Rcpp::wrap(mycofon_balence(C_roots, N_roots, optimal_root_fungal_biomass_ratio, C_fungal, N_fungal, turnover_roots, turnover_roots_mycorrhized, turnover_mantle, turnover_ERM, respiration_parameters_R, NH4, NO3, FOM_Norg, NC_in_fungal_opt, T, Tsb, SWC, N_limits_Plant, N_k_Plant, SWC_k_Plant, N_limits_Fungal, N_k_Fungal, SWC_k_Fungal, mantle_mass, ERM_mass, parameters_NH4_on_NO3, growth_C, growth_N, max_C_allocation_CASSIA, allocation_N_to_rest_of_plant, mycofon_stratergy));
    return rcpp_result_gen;
END_RCPP
}
// uptake_N
double uptake_N(double N, double T, double N_limit, double k, double SWC, double SWC_k);
RcppExport SEXP _MycoModel_uptake_N(SEXP NSEXP, SEXP TSEXP, SEXP N_limitSEXP, SEXP kSEXP, SEXP SWCSEXP, SEXP SWC_kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type T(TSEXP);
    Rcpp::traits::input_parameter< double >::type N_limit(N_limitSEXP);
    Rcpp::traits::input_parameter< double >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type SWC(SWCSEXP);
    Rcpp::traits::input_parameter< double >::type SWC_k(SWC_kSEXP);
    rcpp_result_gen = Rcpp::wrap(uptake_N(N, T, N_limit, k, SWC, SWC_k));
    return rcpp_result_gen;
END_RCPP
}
// uptake_C
double uptake_C(double C, double T, double C_limit, double k, double SWC, double SWC_k);
RcppExport SEXP _MycoModel_uptake_C(SEXP CSEXP, SEXP TSEXP, SEXP C_limitSEXP, SEXP kSEXP, SEXP SWCSEXP, SEXP SWC_kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type C(CSEXP);
    Rcpp::traits::input_parameter< double >::type T(TSEXP);
    Rcpp::traits::input_parameter< double >::type C_limit(C_limitSEXP);
    Rcpp::traits::input_parameter< double >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type SWC(SWCSEXP);
    Rcpp::traits::input_parameter< double >::type SWC_k(SWC_kSEXP);
    rcpp_result_gen = Rcpp::wrap(uptake_C(C, T, C_limit, k, SWC, SWC_k));
    return rcpp_result_gen;
END_RCPP
}
// Plant_N_Uptake
Rcpp::List Plant_N_Uptake(double T, double SWC, double m, double NH4_in, double NO3_in, double FOM_in, std::vector<double> N_limits_R, std::vector<double> N_k_R, std::vector<double> SWC_k_R, std::vector<double> parameters, double demand);
RcppExport SEXP _MycoModel_Plant_N_Uptake(SEXP TSEXP, SEXP SWCSEXP, SEXP mSEXP, SEXP NH4_inSEXP, SEXP NO3_inSEXP, SEXP FOM_inSEXP, SEXP N_limits_RSEXP, SEXP N_k_RSEXP, SEXP SWC_k_RSEXP, SEXP parametersSEXP, SEXP demandSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type T(TSEXP);
    Rcpp::traits::input_parameter< double >::type SWC(SWCSEXP);
    Rcpp::traits::input_parameter< double >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type NH4_in(NH4_inSEXP);
    Rcpp::traits::input_parameter< double >::type NO3_in(NO3_inSEXP);
    Rcpp::traits::input_parameter< double >::type FOM_in(FOM_inSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type N_limits_R(N_limits_RSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type N_k_R(N_k_RSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type SWC_k_R(SWC_k_RSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< double >::type demand(demandSEXP);
    rcpp_result_gen = Rcpp::wrap(Plant_N_Uptake(T, SWC, m, NH4_in, NO3_in, FOM_in, N_limits_R, N_k_R, SWC_k_R, parameters, demand));
    return rcpp_result_gen;
END_RCPP
}
// Fungal_N_Uptake
Rcpp::List Fungal_N_Uptake(double T, double SWC, double NH4, double NO3, double FOM_Norg, std::vector<double> N_limits_R, std::vector<double> N_k_R, std::vector<double> SWC_k_R, double demand);
RcppExport SEXP _MycoModel_Fungal_N_Uptake(SEXP TSEXP, SEXP SWCSEXP, SEXP NH4SEXP, SEXP NO3SEXP, SEXP FOM_NorgSEXP, SEXP N_limits_RSEXP, SEXP N_k_RSEXP, SEXP SWC_k_RSEXP, SEXP demandSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type T(TSEXP);
    Rcpp::traits::input_parameter< double >::type SWC(SWCSEXP);
    Rcpp::traits::input_parameter< double >::type NH4(NH4SEXP);
    Rcpp::traits::input_parameter< double >::type NO3(NO3SEXP);
    Rcpp::traits::input_parameter< double >::type FOM_Norg(FOM_NorgSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type N_limits_R(N_limits_RSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type N_k_R(N_k_RSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type SWC_k_R(SWC_k_RSEXP);
    Rcpp::traits::input_parameter< double >::type demand(demandSEXP);
    rcpp_result_gen = Rcpp::wrap(Fungal_N_Uptake(T, SWC, NH4, NO3, FOM_Norg, N_limits_R, N_k_R, SWC_k_R, demand));
    return rcpp_result_gen;
END_RCPP
}
// Microbe_Uptake
Rcpp::List Microbe_Uptake(double C_microbe, double N_micorbe, double C_soil_compartment, double NC_microbe_opt, double NH4_avaliable, double NO3_avaliable, double Norg_avaliable, double T, double SWC, double NC_Litter, double imobilisation, double assimilation, std::vector<double> N_limits_R, std::vector<double> N_k_R, std::vector<double> SWC_k_R, bool SOM_decomposers, std::vector<double> respiration_microbes_params);
RcppExport SEXP _MycoModel_Microbe_Uptake(SEXP C_microbeSEXP, SEXP N_micorbeSEXP, SEXP C_soil_compartmentSEXP, SEXP NC_microbe_optSEXP, SEXP NH4_avaliableSEXP, SEXP NO3_avaliableSEXP, SEXP Norg_avaliableSEXP, SEXP TSEXP, SEXP SWCSEXP, SEXP NC_LitterSEXP, SEXP imobilisationSEXP, SEXP assimilationSEXP, SEXP N_limits_RSEXP, SEXP N_k_RSEXP, SEXP SWC_k_RSEXP, SEXP SOM_decomposersSEXP, SEXP respiration_microbes_paramsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type C_microbe(C_microbeSEXP);
    Rcpp::traits::input_parameter< double >::type N_micorbe(N_micorbeSEXP);
    Rcpp::traits::input_parameter< double >::type C_soil_compartment(C_soil_compartmentSEXP);
    Rcpp::traits::input_parameter< double >::type NC_microbe_opt(NC_microbe_optSEXP);
    Rcpp::traits::input_parameter< double >::type NH4_avaliable(NH4_avaliableSEXP);
    Rcpp::traits::input_parameter< double >::type NO3_avaliable(NO3_avaliableSEXP);
    Rcpp::traits::input_parameter< double >::type Norg_avaliable(Norg_avaliableSEXP);
    Rcpp::traits::input_parameter< double >::type T(TSEXP);
    Rcpp::traits::input_parameter< double >::type SWC(SWCSEXP);
    Rcpp::traits::input_parameter< double >::type NC_Litter(NC_LitterSEXP);
    Rcpp::traits::input_parameter< double >::type imobilisation(imobilisationSEXP);
    Rcpp::traits::input_parameter< double >::type assimilation(assimilationSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type N_limits_R(N_limits_RSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type N_k_R(N_k_RSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type SWC_k_R(SWC_k_RSEXP);
    Rcpp::traits::input_parameter< bool >::type SOM_decomposers(SOM_decomposersSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type respiration_microbes_params(respiration_microbes_paramsSEXP);
    rcpp_result_gen = Rcpp::wrap(Microbe_Uptake(C_microbe, N_micorbe, C_soil_compartment, NC_microbe_opt, NH4_avaliable, NO3_avaliable, Norg_avaliable, T, SWC, NC_Litter, imobilisation, assimilation, N_limits_R, N_k_R, SWC_k_R, SOM_decomposers, respiration_microbes_params));
    return rcpp_result_gen;
END_RCPP
}
// respiration
double respiration(double Tmb, double Rm, double Q10);
RcppExport SEXP _MycoModel_respiration(SEXP TmbSEXP, SEXP RmSEXP, SEXP Q10SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type Tmb(TmbSEXP);
    Rcpp::traits::input_parameter< double >::type Rm(RmSEXP);
    Rcpp::traits::input_parameter< double >::type Q10(Q10SEXP);
    rcpp_result_gen = Rcpp::wrap(respiration(Tmb, Rm, Q10));
    return rcpp_result_gen;
END_RCPP
}
// symphony_multiple_FOM_daily
Rcpp::List symphony_multiple_FOM_daily(double Tmb, double SWC, double C_FOM_needles, double C_FOM_woody, double C_FOM_roots, double C_FOM_mantle, double C_FOM_ERM, double C_SOM, double N_SOM, double C_decompose_FOM, double C_decompose_SOM, double N_decompose_FOM, double N_decompose_SOM, double Litter_needles, double Litter_woody, double Litter_roots, double Litter_mantle, double Litter_ERM, double imobilisation, double assimilation, double NH4, double NO3, double NC_needles, double NC_woody, double NC_roots, double NC_mantle, double NC_ERM, double NH4_used_Plant, double NH4_used_Fungal, double NO3_used_Plant, double NO3_used_Fungal, double FOM_Norg_used_Plant, double FOM_Norg_used_Fungal, double SOM_Norg_used, std::vector<double> respiration_microbes_params, std::vector<double> N_limits_R, std::vector<double> N_k_R, std::vector<double> SWC_k_R, double NC_microbe_opt, double microbe_turnover);
RcppExport SEXP _MycoModel_symphony_multiple_FOM_daily(SEXP TmbSEXP, SEXP SWCSEXP, SEXP C_FOM_needlesSEXP, SEXP C_FOM_woodySEXP, SEXP C_FOM_rootsSEXP, SEXP C_FOM_mantleSEXP, SEXP C_FOM_ERMSEXP, SEXP C_SOMSEXP, SEXP N_SOMSEXP, SEXP C_decompose_FOMSEXP, SEXP C_decompose_SOMSEXP, SEXP N_decompose_FOMSEXP, SEXP N_decompose_SOMSEXP, SEXP Litter_needlesSEXP, SEXP Litter_woodySEXP, SEXP Litter_rootsSEXP, SEXP Litter_mantleSEXP, SEXP Litter_ERMSEXP, SEXP imobilisationSEXP, SEXP assimilationSEXP, SEXP NH4SEXP, SEXP NO3SEXP, SEXP NC_needlesSEXP, SEXP NC_woodySEXP, SEXP NC_rootsSEXP, SEXP NC_mantleSEXP, SEXP NC_ERMSEXP, SEXP NH4_used_PlantSEXP, SEXP NH4_used_FungalSEXP, SEXP NO3_used_PlantSEXP, SEXP NO3_used_FungalSEXP, SEXP FOM_Norg_used_PlantSEXP, SEXP FOM_Norg_used_FungalSEXP, SEXP SOM_Norg_usedSEXP, SEXP respiration_microbes_paramsSEXP, SEXP N_limits_RSEXP, SEXP N_k_RSEXP, SEXP SWC_k_RSEXP, SEXP NC_microbe_optSEXP, SEXP microbe_turnoverSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type Tmb(TmbSEXP);
    Rcpp::traits::input_parameter< double >::type SWC(SWCSEXP);
    Rcpp::traits::input_parameter< double >::type C_FOM_needles(C_FOM_needlesSEXP);
    Rcpp::traits::input_parameter< double >::type C_FOM_woody(C_FOM_woodySEXP);
    Rcpp::traits::input_parameter< double >::type C_FOM_roots(C_FOM_rootsSEXP);
    Rcpp::traits::input_parameter< double >::type C_FOM_mantle(C_FOM_mantleSEXP);
    Rcpp::traits::input_parameter< double >::type C_FOM_ERM(C_FOM_ERMSEXP);
    Rcpp::traits::input_parameter< double >::type C_SOM(C_SOMSEXP);
    Rcpp::traits::input_parameter< double >::type N_SOM(N_SOMSEXP);
    Rcpp::traits::input_parameter< double >::type C_decompose_FOM(C_decompose_FOMSEXP);
    Rcpp::traits::input_parameter< double >::type C_decompose_SOM(C_decompose_SOMSEXP);
    Rcpp::traits::input_parameter< double >::type N_decompose_FOM(N_decompose_FOMSEXP);
    Rcpp::traits::input_parameter< double >::type N_decompose_SOM(N_decompose_SOMSEXP);
    Rcpp::traits::input_parameter< double >::type Litter_needles(Litter_needlesSEXP);
    Rcpp::traits::input_parameter< double >::type Litter_woody(Litter_woodySEXP);
    Rcpp::traits::input_parameter< double >::type Litter_roots(Litter_rootsSEXP);
    Rcpp::traits::input_parameter< double >::type Litter_mantle(Litter_mantleSEXP);
    Rcpp::traits::input_parameter< double >::type Litter_ERM(Litter_ERMSEXP);
    Rcpp::traits::input_parameter< double >::type imobilisation(imobilisationSEXP);
    Rcpp::traits::input_parameter< double >::type assimilation(assimilationSEXP);
    Rcpp::traits::input_parameter< double >::type NH4(NH4SEXP);
    Rcpp::traits::input_parameter< double >::type NO3(NO3SEXP);
    Rcpp::traits::input_parameter< double >::type NC_needles(NC_needlesSEXP);
    Rcpp::traits::input_parameter< double >::type NC_woody(NC_woodySEXP);
    Rcpp::traits::input_parameter< double >::type NC_roots(NC_rootsSEXP);
    Rcpp::traits::input_parameter< double >::type NC_mantle(NC_mantleSEXP);
    Rcpp::traits::input_parameter< double >::type NC_ERM(NC_ERMSEXP);
    Rcpp::traits::input_parameter< double >::type NH4_used_Plant(NH4_used_PlantSEXP);
    Rcpp::traits::input_parameter< double >::type NH4_used_Fungal(NH4_used_FungalSEXP);
    Rcpp::traits::input_parameter< double >::type NO3_used_Plant(NO3_used_PlantSEXP);
    Rcpp::traits::input_parameter< double >::type NO3_used_Fungal(NO3_used_FungalSEXP);
    Rcpp::traits::input_parameter< double >::type FOM_Norg_used_Plant(FOM_Norg_used_PlantSEXP);
    Rcpp::traits::input_parameter< double >::type FOM_Norg_used_Fungal(FOM_Norg_used_FungalSEXP);
    Rcpp::traits::input_parameter< double >::type SOM_Norg_used(SOM_Norg_usedSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type respiration_microbes_params(respiration_microbes_paramsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type N_limits_R(N_limits_RSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type N_k_R(N_k_RSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type SWC_k_R(SWC_k_RSEXP);
    Rcpp::traits::input_parameter< double >::type NC_microbe_opt(NC_microbe_optSEXP);
    Rcpp::traits::input_parameter< double >::type microbe_turnover(microbe_turnoverSEXP);
    rcpp_result_gen = Rcpp::wrap(symphony_multiple_FOM_daily(Tmb, SWC, C_FOM_needles, C_FOM_woody, C_FOM_roots, C_FOM_mantle, C_FOM_ERM, C_SOM, N_SOM, C_decompose_FOM, C_decompose_SOM, N_decompose_FOM, N_decompose_SOM, Litter_needles, Litter_woody, Litter_roots, Litter_mantle, Litter_ERM, imobilisation, assimilation, NH4, NO3, NC_needles, NC_woody, NC_roots, NC_mantle, NC_ERM, NH4_used_Plant, NH4_used_Fungal, NO3_used_Plant, NO3_used_Fungal, FOM_Norg_used_Plant, FOM_Norg_used_Fungal, SOM_Norg_used, respiration_microbes_params, N_limits_R, N_k_R, SWC_k_R, NC_microbe_opt, microbe_turnover));
    return rcpp_result_gen;
END_RCPP
}
// symphony
Rcpp::List symphony(std::vector<double> params);
RcppExport SEXP _MycoModel_symphony(SEXP paramsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type params(paramsSEXP);
    rcpp_result_gen = Rcpp::wrap(symphony(params));
    return rcpp_result_gen;
END_RCPP
}
// symphony_plus
Rcpp::List symphony_plus(std::vector<double> params, std::vector<double> Photosynthesis);
RcppExport SEXP _MycoModel_symphony_plus(SEXP paramsSEXP, SEXP PhotosynthesisSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type Photosynthesis(PhotosynthesisSEXP);
    rcpp_result_gen = Rcpp::wrap(symphony_plus(params, Photosynthesis));
    return rcpp_result_gen;
END_RCPP
}
// symphony_plus_daily
Rcpp::List symphony_plus_daily(std::vector<double> params, double Photosynthesis, double C_plant, double C_FOM, double N);
RcppExport SEXP _MycoModel_symphony_plus_daily(SEXP paramsSEXP, SEXP PhotosynthesisSEXP, SEXP C_plantSEXP, SEXP C_FOMSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< double >::type Photosynthesis(PhotosynthesisSEXP);
    Rcpp::traits::input_parameter< double >::type C_plant(C_plantSEXP);
    Rcpp::traits::input_parameter< double >::type C_FOM(C_FOMSEXP);
    Rcpp::traits::input_parameter< double >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(symphony_plus_daily(params, Photosynthesis, C_plant, C_FOM, N));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MycoModel_Toy_Model", (DL_FUNC) &_MycoModel_Toy_Model, 9},
    {"_MycoModel_plant_decision", (DL_FUNC) &_MycoModel_plant_decision, 6},
    {"_MycoModel_myco_decision", (DL_FUNC) &_MycoModel_myco_decision, 7},
    {"_MycoModel_myco_growth", (DL_FUNC) &_MycoModel_myco_growth, 4},
    {"_MycoModel_mycofon_balence", (DL_FUNC) &_MycoModel_mycofon_balence, 31},
    {"_MycoModel_uptake_N", (DL_FUNC) &_MycoModel_uptake_N, 6},
    {"_MycoModel_uptake_C", (DL_FUNC) &_MycoModel_uptake_C, 6},
    {"_MycoModel_Plant_N_Uptake", (DL_FUNC) &_MycoModel_Plant_N_Uptake, 11},
    {"_MycoModel_Fungal_N_Uptake", (DL_FUNC) &_MycoModel_Fungal_N_Uptake, 9},
    {"_MycoModel_Microbe_Uptake", (DL_FUNC) &_MycoModel_Microbe_Uptake, 17},
    {"_MycoModel_respiration", (DL_FUNC) &_MycoModel_respiration, 3},
    {"_MycoModel_symphony_multiple_FOM_daily", (DL_FUNC) &_MycoModel_symphony_multiple_FOM_daily, 40},
    {"_MycoModel_symphony", (DL_FUNC) &_MycoModel_symphony, 1},
    {"_MycoModel_symphony_plus", (DL_FUNC) &_MycoModel_symphony_plus, 2},
    {"_MycoModel_symphony_plus_daily", (DL_FUNC) &_MycoModel_symphony_plus_daily, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_MycoModel(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
